import 'package:cached_network_image/cached_network_image.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

import 'package:video_games/models/model.dart';
import 'package:flutter/material.dart';
import 'package:video_games/views/details_view.dart';
import 'package:get/get.dart';
import 'package:flutter_cache_manager/flutter_cache_manager.dart';

class HomePage extends StatefulWidget {
  HomePage({
    Key? key,
  }) : super(key: key);

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  Future<Autogenerated> apiCall() async {
    final response = await http.get(Uri.parse(
        'https://api.rawg.io/api/games?key=5ac29048d12d45d0949c77038115cb56&page=1'));
    return Autogenerated.fromJson(jsonDecode(response.body));
  }

  int slideractiveindex = 0;
  List<String> urlImages = [];
  var uniqueImages = [];
  var growableList = [];
  var listId = [];

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    clearCache();

    return Scaffold(
      body: SingleChildScrollView(
        child: Column(
          children: [
            homePageFutureBuilder(),
          ],
        ),
      ),
    );
  }

  FutureBuilder<Autogenerated> homePageFutureBuilder() {
    return FutureBuilder<Autogenerated>(
      future: apiCall(),
      builder: (BuildContext context, AsyncSnapshot snapshot) {
        List<Results>? data =
            snapshot.data == null ? [] : snapshot.data.results;
        for (var i = 0; i < data!.length; i++) {
          urlImages.add(data[i].backgroundImage!);
        }
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: CircularProgressIndicator());
        } else {
          return Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CarouselSlider.builder(
                itemCount: data.length,
                itemBuilder: (context, index, realIndex) {
                  return buildImage(urlImages[index], index);
                },
                options: CarouselOptions(
                    autoPlay: true,
                    enlargeCenterPage: true,
                    onPageChanged: (index, reason) {}),
              ),
              const SizedBox(height: 32),
              ListView.builder(
                physics: NeverScrollableScrollPhysics(),
                shrinkWrap: true,
                itemBuilder: (BuildContext context, index) {
                  growableList.add(data[index].name);
                  listId.assign(data[index].id);

                  // String? id = data[index].id.toString();
                  // urlImages.add(data[index].backgroundImage);
                  uniqueImages = urlImages.toSet().toList();
                  final urlImage = uniqueImages[index];
                  return Padding(
                    padding: const EdgeInsets.all(10.0),
                    child: ListTile(
                      tileColor: Colors.black12,
                      leading: InkWell(
                          onTap: () {
                            Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => DetailsPage(
                                    id: '${data[index].id}',
                                  ),
                                ));
                          },
                          child: buildImage2(urlImage, index)),
                      title: Column(
                        children: [
                          Text(
                            '${growableList[index]}',
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text('Rating : ${data[index].rating}'),
                              SizedBox(
                                width: 20,
                              ),
                              Text('Release : ${data[index].released}'),
                            ],
                          )
                        ],
                      ),
                    ),
                  );
                },
                itemCount: data.length,
              ),
            ],
          );
        }
      },
    );
  }

  Widget buildImage(String? urlImage, int index) {
    return Container(
        margin: EdgeInsets.symmetric(horizontal: 12),
        color: Colors.grey,
        child: CachedNetworkImage(
          imageUrl: urlImage!,
          fit: BoxFit.cover,
          key: UniqueKey(),
          errorWidget: (context, url, error) => Icon(Icons.error),
          placeholder: (context, url) => Container(
            child: Center(
              child: CircularProgressIndicator(),
            ),
          ),
        ));
  }

  Widget buildImage2(String? urlImage, int index) {
    return Container(
        height: 100,
        width: 100,
        child: CachedNetworkImage(
          imageUrl: urlImage!,
          key: UniqueKey(),
          fit: BoxFit.cover,
          errorWidget: (context, url, error) => Icon(Icons.error),
          placeholder: (context, url) => Container(
            child: Center(
              child: CircularProgressIndicator(),
            ),
          ),
        ));
  }

  void clearCache() {
    DefaultCacheManager().emptyCache();
    imageCache!.clear();
    imageCache!.clearLiveImages();
    setState(() {});
  }
}
